<?php

/**
 * ProcessWire Markup RSS Module
 *
 * Given a PageArray of pages, this module will render an RSS feed from them.
 * This is intended to be used directly from a template file. See usage below.
 *
 * USAGE
 * -----
 * $rss = $modules->get("MarkupRSSEnhanced");
 * $rss->title = "Latest updates";
 * $rss->description = "The most recent pages updated on my site";
 * $items = $pages->find("limit=10, sort=-modified"); // or any pages you want
 * $rss->render($items);
 *
 * See also the $defaultConfigData below (first thing in the class) to see what
 * options you can change at runtime.
 *
 * Module Enhancedment 2014 Martijn Geerts
 *
 * ProcessWire 2.x
 * Copyright (C) 2011 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 */

class MarkupRSSEnhanced extends WireData implements Module, ConfigurableModule {

    protected static $defaultConfigData = array(
        'title' => 'Untitled RSS Feed',
        'url' => '',
        'description' => '',
        'xsl' => '',
        'css' => '',
        'copyright' => '',
        'ttl' => 60,
        'width' => 400, // if an image is chosen for enclosure
        'height' => 300, // if an image is chosen for enclosure
        'boundingbox' => 0, // scale image till one of the edges reach the width or height
        'itemTitleField' => 'title',
        'itemDescriptionField' => 'summary',
        'itemDescriptionLength' => 1024,
        'itemDateField' => 'created',
        'itemLinkField' => '',
        'itemEnclosureField' => '', // used for a files, if array specified, the first one is taken.
        'itemAuthorField' => '', // i.e. createdUser.title or leave blank to not use
        'itemAuthorElement' => 'dc:creator', // may be 'dc:creator' or 'author'
        'header' => 'Content-Type: application/xml; charset=utf-8;',
        'feedPages' => array(),
        );

    /**
     * Return general info about the module for ProcessWire
     *
     */
    public static function getModuleInfo() {
        return array(
            'title' => __('Markup RSS Feed enhanced'),
            'version' => 100,
            'summary' => __('Renders an RSS feed. Given a PageArray, renders an RSS feed of them with optional file or image.'),
            'permanent' => false,
            'singular' => false,
            'autoload' => false,
            );
    }

    /**
     * Set the default config data
     *
     */
    public function __construct() {
        foreach(self::$defaultConfigData as $key => $value) {
            $this->set($key, $value);
        }
    }

    /**
     * Necessary to fulfill Module interface, even though not using it currently
     *
     */
    public function init() { }

    /**
     * Render RSS header
     *
     */
    protected function renderHeader() {

        $out = "<?xml version='1.0' encoding='utf-8' ?>\n";

        if($this->xsl) $out .= "<?xml-stylesheet type='text/xsl' href='{$this->xsl}' ?>\n";
        if($this->css) $out .= "<?xml-stylesheet type='text/css' href='{$this->css}' ?>\n";

        if(!$this->url) $this->url = $this->page->httpUrl;

        $out .= "<rss version='2.0' xmlns:dc='http://purl.org/dc/elements/1.1/'>\n" .
                "<channel>\n" .
                "\t<title>{$this->title}</title>\n" .
                "\t<link>{$this->url}</link>\n" .
                "\t<description>{$this->description}</description>\n" .
                "\t<pubDate>" . date(DATE_RSS) . "</pubDate>\n";

        if($this->copyright) $out .= "\t<copyright>{$this->copyright}</copyright>\n";
        if($this->ttl) $out .= "\t<ttl>{$this->ttl}</ttl>\n";

        return $out;
    }

    /**
     * Render individual RSS item
     *
     */
    protected function renderItem(Page $page) {

        $title = strip_tags($page->get($this->itemTitleField));
        if(empty($title)) return '';
        $title = html_entity_decode($title, ENT_QUOTES, 'UTF-8');
        $title = htmlspecialchars($title, ENT_QUOTES, 'UTF-8');
        $title = str_replace('&#039;', '&apos;', $title);

        if($this->itemDateField && ($ts = $page->getUnformatted($this->itemDateField))) {
            $pubDate = "\t\t<pubDate>" . date(DATE_RSS, $ts) . "</pubDate>\n";
        } else {
            $pubDate = '';
        }

        $author = '';
        if($this->itemAuthorField) {
            $author = $page->getUnformatted($this->itemAuthorField);
            if(strlen($author)) {
                $author = $this->wire('sanitizer')->entities($author);
                $author = "\t\t<$this->itemAuthorElement>$author</$this->itemAuthorElement>\n";
            } else $author = '';
        }


        $enclosure = $this->enclosure($page);

        $link = $this->link($page);
        $guid = $this->link($page, 'guid');

        $description = $page->get($this->itemDescriptionField);
        if(is_null($description)) $description = '';
        $description = $this->truncateDescription(trim($description));

        $out =     "\t<item>\n" .
            "\t\t<title>$title</title>\n" .
            "\t\t<description><![CDATA[$description]]></description>\n" .
            $enclosure .
            $pubDate .
            $author .
            $link .
            $guid .
            "\t</item>\n";

        return $out;
    }

    /**
     * Render the feed and return it
     *
     */
    public function renderFeed(PageArray $feedPages = null) {

        if(!is_null($feedPages)) $this->feedPages = $feedPages;

        $out = $this->renderHeader();

        foreach($this->feedPages as $page) {
            if(!$page->viewable()) continue;
            $out .= $this->renderItem($page);
                }

                $out .= "</channel>\n</rss>\n";

        return $out;
    }

    /**
     * Render the feed and echo it (with proper http header)
     *
     */
    public function render(PageArray $feedPages = null) {
        header($this->header);
        echo $this->renderFeed($feedPages);
        return true;
    }

    /**
     * Truncate the description to a specific length and then truncate to avoid splitting any words.
     *
     */
    protected function truncateDescription($str) {

        $maxlen = $this->itemDescriptionLength;
        if(!$maxlen) return $str;

        // note: tags are not stripped if itemDescriptionLength == 0
        $str = strip_tags($str);

        if(strlen($str) < $maxlen) return $str;

        $str = trim(substr($str, 0, $maxlen));

        // boundaries that we can end the summary with
        $boundaries = array('. ', '? ', '! ', ', ', '; ', '-');
        $bestPos = 0;

        foreach($boundaries as $boundary) {
            if(($pos = strrpos($str, $boundary)) !== false) {
                // find the boundary that is furthest in string
                if($pos > $bestPos) $bestPos = $pos;
            }
        }

        // determine if we should truncate to last punctuation or last space.
        // if the last punctuation is further away then 1/4th the total length, then we'll
        // truncate to the last space. Otherwise, we'll truncate to the last punctuation.
        $spacePos = strrpos($str, ' ');
        if($spacePos > $bestPos && (($spacePos - ($maxlen / 4)) > $bestPos)) $bestPos = $spacePos;

        if(!$bestPos) $bestPos = $maxlen;

        return trim(substr($str, 0, $bestPos+1));
    }

    /**
     * Enclosure element of <item> could be a image or file. It has three required attributes.
     * url says where the enclosure is located, length says how big it is in bytes, and type
     * says what its type is, a standard MIME type.
     *
     */
    protected function enclosure(Page $page) {

        $name = $this->itemEnclosureField;
        if(!$page->template->hasField($name)) return '';
        $fieldObject = $this->fields->get($name); // field object
        $field = $page->$name;
        $fieldType = $fieldObject->type;
        $maxFiles = $fieldObject->maxFiles;

        if(count($field) === 0) {
            return '';
        } else if ($maxFiles != 1) {
            $field = $field->first();
        }

        // get mimetype
        $info = finfo_open(FILEINFO_MIME_TYPE);
        $mime = finfo_file($info, $field->filename);
        finfo_close($info);

        if($field instanceof Pageimage) {

            $width = (int) $this->width;
            $height = (int) $this->height;

            if ($width && $height && $this->boundingbox) {
                $ratiox = $width / $field->width;
                $ratioy = $height / $field->height;

                $width = min($ratiox, $ratioy) * $field->width;
                $height = min($ratiox, $ratioy) * $field->height;

                $field = $field->size($width, $height);
            } else if($width || $height) {
                $field = $field->size($width, $height);
            }
        }

        return "\t\t<enclosure url='{$field->httpUrl}' length='{$field->filesize}' type='$mime' />\n";
    }

    /**
     * By default the Page httpUrl is used as link. If itemLinkField is specified, that field is used
     * is used for the item link. For the guid item, we stil use the PageUrl.
     *
     */
    protected function link(Page $page, $tag = 'link') {

        if(!$this->itemLinkField) return "\t\t<{$tag}>{$page->httpUrl}</{$tag}>\n";

        $field = $this->itemLinkField;
        $url = $this->sanitizer->url($page->$field);
        $url = str_replace("&", '&amp;', $url);
        if(strlen($url)) return "\t\t<{$tag}>{$url}</{$tag}>\n";

        return '';
    }

    /**
     * Provide fields for configuring this module
     *
     */
    static public function getModuleConfigInputfields(array $data) {

        $wrapper = new InputfieldWrapper();
        $modules = wire('modules');

        foreach(self::$defaultConfigData as $key => $value) {
            if(!isset($data[$key])) $data[$key] = $value;
        }

        $f = $modules->get('InputfieldMarkup');
        $f->label = __("Information");
        $f->description =
            __("Select the default options for any given feed. Each of these may be overridden in the API,") . " " .
            __("so the options you select below should be considered defaults, unless you only have 1 feed.") . " " .
            __("If you only need to support 1 feed, then you will not need to override any of these in the API.");
        $f->value = "<p class='description'>" .
            '// example' . "<br>" .
            '$rss = $modules->get("MarkupRSSEnhanced");' . "<br>" .
            '$rss->title = "Latest updates";' . "<br>" .
            '$rss->description = "The most recent pages updated on my site";' . "<br>" .
            '$items = $pages->find("limit=10, sort=-modified"); // or any pages you want' . "<br>" .
            '$rss->render($items);' . "</p>";


        $wrapper->add($f);

        $fs = $modules->get('InputfieldFieldset');
        $fs->label = __("Channel Elements");
        $fs->description = __("The channel element describes the RSS feed and gives global information about the feed.");

        $f = $modules->get('InputfieldText');
        $f->attr('name', 'title');
        $f->attr('value', $data['title']);
        $f->label = __("Default Feed Title");
        $fs->add($f);

        $f = $modules->get('InputfieldURL');
        $f->attr('name', 'url');
        $f->attr('value', $data['url']);
        $f->label = __("Default Feed URL");
        $f->description = __("The URL on your site that serves as a feed index. May also be left blank.");
        $fs->add($f);

        $f = $modules->get('InputfieldText');
        $f->attr('name', 'description');
        $f->attr('value', $data['description']);
        $f->label = __("Default Feed Description");
        $f->description = __("The default description for a feed. May also be left blank.");
        $fs->add($f);

        $f = $modules->get('InputfieldText');
        $f->attr('name', 'copyright');
        $f->attr('value', $data['copyright']);
        $f->label = __("Default Feed Copyright");
        $f->description = __("The default copyright statement for a feed. Default is blank.");
        $fs->add($f);

        $f = $modules->get('InputfieldInteger');
        $f->attr('name', 'ttl');
        $f->attr('value', (int) $data['ttl']);
        $f->label = __("Default Feed TTL");
        $f->description = __("TTL stands for \"time to live\" in minutes. It indicates how long a channel can be cached before refreshing from the source. Default is 60.");
        $fs->add($f);
        $wrapper->add($fs);

        $fs = $modules->get('InputfieldFieldset');
        $fs->label = __("Item Elements");
        $fs->description = __("An item represent a page");

        $f1 = $modules->get('InputfieldSelect');
        $f1->attr('name', 'itemTitleField');
        $f1->attr('value', $data['itemTitleField']);
        $f1->label = __("Default Feed Item Title Field");
        $f1->description = __("The default field to use as an individual feed item's title.");

        $f2 = $modules->get('InputfieldSelect');
        $f2->attr('name', 'itemDescriptionField');
        $f2->attr('value', $data['itemDescriptionField']);
        $f2->label = __("Default Feed Item Description Field");
        $f2->description = __("The default field to use as an individual feed item's description (typically a summary or body field).");

        $f2a = $modules->get('InputfieldInteger');
        $f2a->attr('name', 'itemDescriptionLength');
        $f2a->attr('value', (int) $data['itemDescriptionLength']);
        $f2a->label = __("Maxmum Characters for Item Description Field");
        $f2a->description = __("The item description will be truncated to be no longer than the max length provided. Specify '0' for no max length. When there is no max length), markup tags will not be stripped.");

        $f3 = $modules->get('InputfieldSelect');
        $f3->attr('name', 'itemDateField');
        $f3->attr('value', $data['itemDateField']);
        $f3->label = __("Default Feed Item Date Field");
        $f3->description = __("The default field to use as an individual feed item's date.");
        $f3->addOption('created');
        $f3->addOption('modified');

        $f4 = $modules->get('InputfieldSelect');
        $f4->attr('name', 'itemLinkField');
        $f4->attr('value', $data['itemLinkField']);
        $f4->label = __("Default Feed Item Link Field");
        $f4->description = __("The field to use as an individual feed item's link. Leave blank to use the de Page as link.");

        $f5 = $modules->get('InputfieldSelect');
        $f5->attr('name', 'itemEnclosureField');
        $f5->attr('value', $data['itemEnclosureField']);
        $f5->label = __("Default Feed Item File Field (enclosure)");
        $f5->description = __("The default field to use as an individual feed item's enclosure . (If the field contains an array of Pagesfiles, the first one will be used.)");
        $f5->notes = "The image or file is added to item enclosure tag. Image sizing only occurs if the field is an instance of Pageimage.";

        foreach(wire('fields') as $field) {
            // FieldtypeURL needs to be called before FieldtypeText
            if($field->type instanceof FieldtypeURL) {
                $f4->addOption($field->name);
            } else if($field->type instanceof FieldtypeText) {
                $f1->addOption($field->name);
                $f2->addOption($field->name);
            } else if($field->type instanceof FieldtypeDate) {
                $f3->addOption($field->name);
            } else if($field->type instanceof FieldtypeFile) {
                $f5->addOption($field->name);
            }
        }

        $fs->add($f1);
        $fs->add($f2);
        $fs->add($f2a);
        $fs->add($f3);
        $fs->add($f4);
        $fs->add($f5);

        $f = $modules->get('InputfieldInteger');
        $f->attr('name', 'width');
        $f->attr('value', (int) $data['width']);
        $f->label = __("Width for image enclosure");
        $f->description = __("The width of the image if the enclosure is an image.");
        $f->notes = "Set 0 for proportional to width.";
        $fs->add($f);

        $f = $modules->get('InputfieldInteger');
        $f->attr('name', 'height');
        $f->attr('value', (int) $data['height']);
        $f->label = __("Height for image enclosure");
        $f->description = __("The width of the image if the enclosure is an image.");
        $f->notes = "Set 0 for proportional to height.";
        $fs->add($f);

        $f = $modules->get('InputfieldCheckbox');
        $f->attr('name', 'boundingbox');
        $f->attr('value', 1);
        $f->attr('checked', (int) $data['boundingbox'] ? 'checked' : null );
        $f->label = __("Bounding box");
        $f->description =
            __("Scale the image until one side reaches the goal dimension, specified by width and height.") . " " .
            __("Ideal for logo's as it prevent cropping.");
        $fs->add($f);
        $wrapper->add($fs);

        $fs = $modules->get('InputfieldFieldset');
        $fs->label = __("Prettify the feed");
        $fs->notes = __("Not supported in all clients.");

        $f = $modules->get('InputfieldURL');
        $f->attr('name', 'xsl');
        $f->attr('value', $data['xsl']);
        $f->label = __("Default Link to XSL Stylesheet");
        $f->description = __("Optional URL/link to an XSL stylesheet. Default is none.");
        $fs->add($f);

        $f = $modules->get('InputfieldURL');
        $f->attr('name', 'css');
        $f->attr('value', $data['css']);
        $f->label = __("Default Link to CSS Stylesheet");
        $f->description = __("Optional URL/link to a CSS stylesheet. Default is none.");
        $fs->add($f);
        $fs->add($f);
        $wrapper->add($fs);

        return $wrapper;
    }
}
